{"version":3,"file":"util.test.js","sourceRoot":"","sources":["../../../test/util.test.ts"],"names":[],"mappings":";AAAA;;4DAE4D;;;;;;;;;;;;;;;;;;;;;;;;;AAE5D,+CAAiC;AACjC,6CAAmD;AAEnD,QAAQ,CAAC,iBAAiB,EAAE,GAAG,EAAE;IAChC,kEAAkE;IAClE,EAAE,CAAC,oBAAoB,EAAE,GAAG,EAAE;QAC7B,IAAI,WAAW,GAAwB,EAAE,CAAC;QAC1C,oBAAa,CAAC,iBAAiB,CAAC,WAAW,EAAE,EAAE,CAAC,CAAC;QACjD,MAAM,CAAC,eAAe,CAAC,WAAW,EAAE,EAAE,CAAC,CAAC;QACxC,WAAW,GAAG,EAAE,MAAM,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC;QACzD,oBAAa,CAAC,iBAAiB,CAAC,WAAW,EAAE,CAAC;gBAC7C,MAAM,EAAE,OAAO;gBACf,iBAAiB,EAAE,GAAG;aACtB,CAAC,CAAC,CAAC;QACJ,MAAM,CAAC,eAAe,CAAC,WAAW,EAAE,EAAE,MAAM,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC,CAAC;QAChF,WAAW,GAAG,EAAE,MAAM,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC;QACzD,oBAAa,CAAC,iBAAiB,CAAC,WAAW,EAAE,CAAC;gBAC7C,MAAM,EAAE,OAAO;gBACf,iBAAiB,EAAE,SAAS;aAC5B,CAAC,CAAC,CAAC;QACJ,qDAAqD;QACrD,MAAM,CAAC,eAAe,CAAC,WAAW,EAAE,EAAE,MAAM,EAAE,GAAG,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC,CAAC;IACpE,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,qCAAqC,EAAE,GAAG,EAAE;QAC9C,MAAM,cAAc,GAAG,oBAAa,CAAC,WAAW,EAAE,CAAC;QACnD,MAAM,cAAc,GAAG,oBAAa,CAAC,WAAW,EAAE,CAAC;QACnD,MAAM,CAAC,WAAW,CAAC,cAAc,EAAE,cAAc,CAAC,CAAC;IACpD,CAAC,CAAC,CAAC;IAEH,sFAAsF;IACtF,uEAAuE;AACxE,CAAC,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------\n * Copyright (C) Microsoft Corporation. All rights reserved.\n *--------------------------------------------------------*/\n\nimport * as assert from \"assert\";\nimport { TelemetryUtil } from \"../src/common/util\";\n\ndescribe(\"Util test suite\", () => {\n\t// Test that the apply repacements util function works as expected\n\tit(\"Apply replacements\", () => {\n\t\tlet replacement: Record<string, any> = {};\n\t\tTelemetryUtil.applyReplacements(replacement, []);\n\t\tassert.deepStrictEqual(replacement, {});\n\t\treplacement = { valueA: \"a\", valueB: \"b\", \"123\": \"123\" };\n\t\tTelemetryUtil.applyReplacements(replacement, [{\n\t\t\tlookup: /[a]/gi,\n\t\t\treplacementString: \"c\"\n\t\t}]);\n\t\tassert.deepStrictEqual(replacement, { valueA: \"c\", valueB: \"b\", \"123\": \"123\" });\n\t\treplacement = { valueA: \"a\", valueB: \"b\", \"123\": \"123\" };\n\t\tTelemetryUtil.applyReplacements(replacement, [{\n\t\t\tlookup: /[a]/gi,\n\t\t\treplacementString: undefined\n\t\t}]);\n\t\t// Undefined replacement string should remove the key\n\t\tassert.deepStrictEqual(replacement, { valueB: \"b\", \"123\": \"123\" });\n\t});\n\n\tit(\"Telemetry util implements singleton\", () => {\n\t\tconst telemetryUtil1 = TelemetryUtil.getInstance();\n\t\tconst telemetryUtil2 = TelemetryUtil.getInstance();\n\t\tassert.strictEqual(telemetryUtil1, telemetryUtil2);\n\t});\n\n\t// TODO - Add tests for when you just have telemetry configuration settings and no API\n\t// This is the hardest to shim and only in very old versions of VS Code\n});"]}