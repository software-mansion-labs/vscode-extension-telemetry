{"version":3,"file":"baseTelemetrySender.test.js","sourceRoot":"","sources":["../../../test/baseTelemetrySender.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------\n * Copyright (C) Microsoft Corporation. All rights reserved.\n *--------------------------------------------------------*/\n\n/* eslint-disable @typescript-eslint/ban-ts-comment */\nimport { BaseTelemetrySender, BaseTelemetryClient } from \"../src/common/baseTelemetrySender\";\nimport * as sinon from \"sinon\";\nimport assert from \"assert\";\n\ndescribe(\"Base telemetry sender test suite\", () => {\n\tconst telemetryClient: BaseTelemetryClient = {\n\t\tlogEvent: sinon.spy(),\n\t\tflush: sinon.spy(),\n\t\tdispose: sinon.spy(),\n\t};\n\tconst telemetryClientFactory: (key: string) => Promise<BaseTelemetryClient> = async () => {\n\t\treturn telemetryClient;\n\t};\n\n\tbeforeEach(() => {\n\t\t// Reset history on the stubs\n\t\t(telemetryClient.logEvent as sinon.SinonSpy).resetHistory();\n\t\t(telemetryClient.flush as sinon.SinonSpy).resetHistory();\n\t});\n\n\tit(\"Log functions add to queue if not instantiated\", () => {\n\t\tconst sender = new BaseTelemetrySender(\"key\", telemetryClientFactory);\n\t\tsender.sendEventData(\"eventName\", {});\n\t\t//@ts-ignore (needed to spy on private properties)\n\t\tassert.strictEqual(sender._eventQueue.length, 1);\n\t\t//@ts-ignore (needed to spy on private properties)\n\t\tassert.strictEqual((telemetryClient.logEvent as sinon.SinonSpy).callCount, 0);\n\t});\n\n\tit(\"Log functions call client if instantiated\", async () => {\n\t\tconst sender = new BaseTelemetrySender(\"key\", telemetryClientFactory);\n\t\tsender.instantiateSender();\n\t\t// Wait 10ms to ensure that the sender has instantiated the client\n\t\tawait new Promise((resolve) => setTimeout(resolve, 10));\n\t\tsender.sendEventData(\"eventName\", {});\n\t\t//@ts-ignore (needed to spy on private properties)\n\t\tassert.strictEqual(sender._eventQueue.length, 0);\n\t\t//@ts-ignore (needed to spy on private properties)\n\t\tassert.strictEqual(sender._exceptionQueue.length, 0);\n\t\tassert.strictEqual((telemetryClient.logEvent as sinon.SinonSpy).callCount, 1);\n\t});\n\n\tit(\"Queues are flushed upon instantiation\", async () => {\n\t\tconst sender = new BaseTelemetrySender(\"key\", telemetryClientFactory);\n\t\tsender.sendEventData(\"eventName\", {});\n\t\t// Should cause a flush\n\t\tsender.instantiateSender();\n\t\t// Wait 10ms to ensure that the sender has instantiated the client\n\t\tawait new Promise((resolve) => setTimeout(resolve, 10));\n\t\t//@ts-ignore (needed to spy on private properties)\n\t\tassert.strictEqual(sender._eventQueue.length, 0);\n\t\t//@ts-ignore (needed to spy on private properties)\n\t\tassert.strictEqual(sender._exceptionQueue.length, 0);\n\t\tassert.strictEqual((telemetryClient.logEvent as sinon.SinonSpy).callCount, 1);\n\t});\n\n\tdescribe(\"Send error data logic\", () => {\n\t\tlet sender: BaseTelemetrySender;\n\n\t\tbeforeEach(async () => {\n\t\t\tsender = new BaseTelemetrySender(\"key\", telemetryClientFactory);\n\t\t\tsender.instantiateSender();\n\t\t\t// Wait 10ms to ensure that the sender has instantiated the client\n\t\t\tawait new Promise((resolve) => setTimeout(resolve, 10));\n\t\t});\n\n\t\tit(\"Error properties are correctly created for an empty data argument\", () => {\n\t\t\tconst error = new Error(\"test\");\n\t\t\tsender.sendErrorData(error);\n\t\t\tassert.strictEqual((telemetryClient.logEvent as sinon.SinonSpy).callCount, 1);\n\t\t\tsinon.assert.calledWithMatch(\n\t\t\t\ttelemetryClient.logEvent as sinon.SinonSpy, \"unhandlederror\",\n\t\t\t\t{ properties: { name: error.name, message: error.message, stack: error.stack } }\n\t\t\t);\n\t\t});\n\n\t\tit(\"Error properties are correctly created for a data without properties field\", () => {\n\t\t\tconst error = new Error(\"test\");\n\t\t\tsender.sendErrorData(error, { prop1: 1, prop2: \"two\" });\n\t\t\tassert.strictEqual((telemetryClient.logEvent as sinon.SinonSpy).callCount, 1);\n\t\t\tsinon.assert.calledWithMatch(\n\t\t\t\ttelemetryClient.logEvent as sinon.SinonSpy, \"unhandlederror\",\n\t\t\t\t{ properties: { prop1: 1, prop2: \"two\", name: error.name, message: error.message, stack: error.stack } }\n\t\t\t);\n\t\t});\n\n\t\tit(\"Error properties are correctly created for a data with properties field\", () => {\n\t\t\tconst error = new Error(\"uh oh\");\n\t\t\tsender.sendErrorData(error, { properties: { prop1: 1, prop2: \"two\" } });\n\t\t\tassert.strictEqual((telemetryClient.logEvent as sinon.SinonSpy).callCount, 1);\n\t\t\tsinon.assert.calledWithMatch(\n\t\t\t\ttelemetryClient.logEvent as sinon.SinonSpy, \"unhandlederror\",\n\t\t\t\t{ properties: { prop1: 1, prop2: \"two\", name: error.name, message: error.message, stack: error.stack } }\n\t\t\t);\n\t\t});\n\t});\n});\n"]}