{"version":3,"file":"baseTelemetryReporter.js","sourceRoot":"","sources":["../../../../src/common/baseTelemetryReporter.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------\n * Copyright (C) Microsoft Corporation. All rights reserved.\n *--------------------------------------------------------*/\n\nimport type * as vscode from \"vscode\";\nimport type { TelemetryEventMeasurements, TelemetryEventProperties } from \"../../dist/telemetryReporter\";\nimport { ILazyTelemetrySender } from \"./baseTelemetrySender\";\n\nexport interface SenderData {\n\tproperties?: TelemetryEventProperties,\n\tmeasurements?: TelemetryEventMeasurements\n}\n\n/**\n * A replacement option for the app insights client. This allows the sender to filter out any sensitive or unnecessary information from the telemetry server.\n */\nexport interface ReplacementOption {\n\n\t/**\n\t * A regular expression matching any property to be removed or replaced from the telemetry server.\n\t */\n\tlookup: RegExp;\n\n\t/**\n\t * The replacement value for the property. If not present or undefined, the property will be removed.\n\t */\n\treplacementString?: string;\n}\n\nexport class BaseTelemetryReporter {\n\tprivate userOptIn = false;\n\tprivate errorOptIn = false;\n\tprivate readonly disposables: vscode.Disposable[] = [];\n\tprivate readonly _onDidChangeTelemetryLevel = new this.vscodeAPI.EventEmitter<\"all\" | \"error\" | \"crash\" | \"off\">();\n\tpublic readonly onDidChangeTelemetryLevel = this._onDidChangeTelemetryLevel.event;\n\tprivate readonly telemetryLogger: vscode.TelemetryLogger;\n\n\tconstructor(\n\t\tprivate telemetrySender: ILazyTelemetrySender,\n\t\tprivate readonly vscodeAPI: typeof vscode,\n\t\tinitializationOptions?: vscode.TelemetryLoggerOptions\n\t) {\n\t\tthis.telemetryLogger = this.vscodeAPI.env.createTelemetryLogger(this.telemetrySender, initializationOptions);\n\n\t\t// Keep track of the user's opt-in status\n\t\tthis.updateUserOptIn();\n\t\tthis.telemetryLogger.onDidChangeEnableStates(() => {\n\t\t\tthis.updateUserOptIn();\n\t\t});\n\t}\n\n\t/**\n\t * Updates the user's telemetry opt-in status\n\t */\n\tprivate updateUserOptIn(): void {\n\t\tthis.errorOptIn = this.telemetryLogger.isErrorsEnabled;\n\t\tthis.userOptIn = this.telemetryLogger.isUsageEnabled;\n\t\t// The sender is lazy loaded so if telemetry is off it's not loaded in\n\t\tif (this.telemetryLogger.isErrorsEnabled || this.telemetryLogger.isUsageEnabled) {\n\t\t\tthis.telemetrySender.instantiateSender();\n\t\t}\n\t\tthis._onDidChangeTelemetryLevel.fire(this.telemetryLevel);\n\t}\n\n\tpublic get telemetryLevel(): \"all\" | \"error\" | \"crash\" | \"off\" {\n\t\tif (this.errorOptIn && this.userOptIn) {\n\t\t\treturn \"all\";\n\t\t} else if (this.errorOptIn) {\n\t\t\treturn \"error\";\n\t\t} else {\n\t\t\treturn \"off\";\n\t\t}\n\t}\n\n\t/**\n\t * Internal function which logs telemetry events and takes extra options.\n\t * @param eventName The name of the event\n\t * @param properties The properties of the event\n\t * @param measurements The measurements (numeric values) to send with the event\n\t * @param sanitize Whether or not to sanitize to the properties and measures\n\t * @param dangerous Whether or not to ignore telemetry level\n\t */\n\tprivate internalSendTelemetryEvent(\n\t\teventName: string,\n\t\tproperties: TelemetryEventProperties | undefined,\n\t\tmeasurements: TelemetryEventMeasurements | undefined,\n\t\tdangerous: boolean\n\t): void {\n\t\t// If it's dangerous we skip going through the logger as the logger checks opt-in status, etc.\n\t\tif (dangerous) {\n\t\t\tthis.telemetrySender.sendEventData(eventName, { properties, measurements });\n\t\t} else {\n\t\t\tthis.telemetryLogger.logUsage(eventName, { properties, measurements });\n\t\t}\n\t}\n\n\t/**\n\t * Given an event name, some properties, and measurements sends a telemetry event.\n\t * Properties are sanitized on best-effort basis to remove sensitive data prior to sending.\n\t * @param eventName The name of the event\n\t * @param properties The properties to send with the event\n\t * @param measurements The measurements (numeric values) to send with the event\n\t */\n\tpublic sendTelemetryEvent(eventName: string, properties?: TelemetryEventProperties, measurements?: TelemetryEventMeasurements): void {\n\t\tthis.internalSendTelemetryEvent(eventName, properties, measurements, false);\n\t}\n\n\n\t/**\n\t * Sends a raw (unsanitized) telemetry event with the given properties and measurements.\n\t * NOTE: This will not be logged to the output channel due to API limitations.\n\t * @param eventName The name of the event\n\t * @param properties The set of properties to add to the event in the form of a string key value pair\n\t * @param measurements The set of measurements to add to the event in the form of a string key  number value pair\n\t */\n\tpublic sendRawTelemetryEvent(eventName: string, properties?: TelemetryEventProperties, measurements?: TelemetryEventMeasurements): void {\n\t\tconst modifiedProperties = { ...properties };\n\t\tfor (const propertyKey of Object.keys(modifiedProperties ?? {})) {\n\t\t\tconst propertyValue = modifiedProperties[propertyKey];\n\t\t\tif (typeof propertyKey === \"string\" && propertyValue !== undefined) {\n\t\t\t\t// Trusted values are not sanitized, which is what we want for raw telemetry\n\t\t\t\tmodifiedProperties[propertyKey] = new this.vscodeAPI.TelemetryTrustedValue<string>(typeof propertyValue === \"string\" ? propertyValue : propertyValue.value);\n\t\t\t}\n\t\t}\n\n\t\tthis.sendTelemetryEvent(eventName, modifiedProperties, measurements);\n\n\t}\n\n\t/**\n\t * **DANGEROUS** Given an event name, some properties, and measurements sends a telemetry event without checking telemetry setting\n\t * Do not use unless in a controlled environment i.e. sending telmetry from a CI pipeline or testing during development\n\t * @param eventName The name of the event\n\t * @param properties The properties to send with the event\n\t * @param measurements The measurements (numeric values) to send with the event\n\t * @param sanitize Whether or not to sanitize to the properties and measures, defaults to true\n\t */\n\tpublic sendDangerousTelemetryEvent(eventName: string, properties?: TelemetryEventProperties, measurements?: TelemetryEventMeasurements): void {\n\t\t// Since telemetry is probably off when sending dangerously, we must start the sender\n\t\tthis.telemetrySender.instantiateSender();\n\t\tthis.internalSendTelemetryEvent(eventName, properties, measurements, true);\n\t}\n\n\t/**\n\t * Internal function which logs telemetry error events and takes extra options.\n\t * @param eventName The name of the event\n\t * @param properties The properties of the event\n\t * @param measurements The measurements (numeric values) to send with the event\n\t * @param sanitize Whether or not to sanitize to the properties and measures\n\t * @param dangerous Whether or not to ignore telemetry level\n\t */\n\tprivate internalSendTelemetryErrorEvent(\n\t\teventName: string,\n\t\tproperties: TelemetryEventProperties | undefined,\n\t\tmeasurements: TelemetryEventMeasurements | undefined,\n\t\tdangerous: boolean\n\t): void {\n\t\tif (dangerous) {\n\t\t\tthis.telemetrySender.sendEventData(eventName, { properties, measurements });\n\t\t} else {\n\t\t\tthis.telemetryLogger.logError(eventName, { properties, measurements });\n\t\t}\n\t}\n\n\t/**\n\t * Given an event name, some properties, and measurements sends an error event\n\t * @param eventName The name of the event\n\t * @param properties The properties to send with the event\n\t * @param measurements The measurements (numeric values) to send with the event\n\t */\n\tpublic sendTelemetryErrorEvent(eventName: string, properties?: TelemetryEventProperties, measurements?: TelemetryEventMeasurements): void {\n\t\tthis.internalSendTelemetryErrorEvent(eventName, properties, measurements,false);\n\t}\n\n\t/**\n\t * **DANGEROUS** Given an event name, some properties, and measurements sends a telemetry error event without checking telemetry setting\n\t * Do not use unless in a controlled environment i.e. sending telmetry from a CI pipeline or testing during development\n\t * @param eventName The name of the event\n\t * @param properties The properties to send with the event\n\t * @param measurements The measurements (numeric values) to send with the event\n\t * @param sanitize Whether or not to run the properties and measures through sanitiziation, defaults to true\n\t */\n\tpublic sendDangerousTelemetryErrorEvent(eventName: string, properties?: TelemetryEventProperties, measurements?: TelemetryEventMeasurements): void {\n\t\t// Since telemetry is probably off when sending dangerously, we must start the sender\n\t\tthis.telemetrySender.instantiateSender();\n\t\tthis.internalSendTelemetryErrorEvent(eventName, properties, measurements, true);\n\t}\n\n\t/**\n\t * Disposes of the telemetry reporter\n\t */\n\tpublic async dispose(): Promise<any> {\n\t\tawait this.telemetrySender.dispose();\n\t\tthis.telemetryLogger.dispose();\n\t\treturn Promise.all(this.disposables.map(d => d.dispose()));\n\t}\n}\n"]}