{"version":3,"file":"telemetryReporter.js","sourceRoot":"","sources":["../../../src/browser/telemetryReporter.ts"],"names":[],"mappings":"AAAA;;4DAE4D;AAE5D,OAAO,KAAK,MAAM,MAAM,QAAQ,CAAC;AACjC,OAAO,EAAE,0BAA0B,EAAE,MAAM,4BAA4B,CAAC;AACxE,OAAO,EAAE,wBAAwB,EAAE,MAAM,oCAAoC,CAAC;AAC9E,OAAO,EAAE,qBAAqB,EAAqB,MAAM,iCAAiC,CAAC;AAC3F,OAAO,EAAE,mBAAmB,EAAE,MAAM,+BAA+B,CAAC;AACpE,OAAO,EAAE,aAAa,EAAE,MAAM,gBAAgB,CAAC;AAE/C,SAAS,iBAAiB,CAAC,SAAoB;IAC9C,IAAI,SAAS,CAAC,aAAa,EAAE,CAAC;QAC7B,MAAM,OAAO,GAAG,SAAS,CAAC,aAAa,CAAC,MAAM,CAAC,SAAS,CAAC,aAAa,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QAC1F,OAAO,GAAG,SAAS,CAAC,aAAa,CAAC,QAAQ,MAAM,OAAO,EAAE,KAAK,KAAK,OAAO,EAAE,OAAO,GAAG,CAAC;IACxF,CAAC;SAAM,CAAC;QACP,kDAAkD;QAClD,qIAAqI;QACrI,OAAO,SAAS,CAAC,SAAS,CAAC,OAAO,CAAC,qBAAqB,EAAE,IAAI,CAAC,CAAC;IACjE,CAAC;AACF,CAAC;AAED,MAAM,CAAC,OAAO,OAAO,iBAAkB,SAAQ,qBAAqB;IACnE,YAAY,gBAAwB,EAAE,kBAAwC;QAC7E,IAAI,aAAa,GAAG,CAAC,gBAAwB,EAAE,EAAE,CAAC,wBAAwB,CAAC,gBAAgB,EAAE,MAAM,CAAC,GAAG,CAAC,SAAS,EAAE,MAAM,CAAC,GAAG,CAAC,SAAS,EAAE,SAAS,EAAE,kBAAkB,CAAC,CAAC;QACxK,0CAA0C;QAC1C,IAAI,aAAa,CAAC,yBAAyB,CAAC,gBAAgB,CAAC,EAAE,CAAC;YAC/D,aAAa,GAAG,CAAC,GAAW,EAAE,EAAE,CAAC,0BAA0B,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC;QAC1E,CAAC;QAED,MAAM,MAAM,GAAG;YACd,OAAO,EAAE,iBAAiB,CAAC,SAAS,CAAC;YACrC,QAAQ,EAAE,KAAK;YACf,YAAY,EAAE,KAAK;SACnB,CAAC;QAEF,MAAM,MAAM,GAAG,IAAI,mBAAmB,CAAC,gBAAgB,EAAE,aAAa,CAAC,CAAC;QACxE,6BAA6B;QAC7B,IAAI,gBAAgB,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC;YACjE,MAAM,IAAI,KAAK,CAAC,sFAAsF,CAAC,CAAC;QACzG,CAAC;QACD,KAAK,CAAC,MAAM,EAAE,MAAM,EAAE,EAAE,0BAA0B,EAAE,aAAa,CAAC,6BAA6B,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;IAC5G,CAAC;CACD","sourcesContent":["/*---------------------------------------------------------\n * Copyright (C) Microsoft Corporation. All rights reserved.\n *--------------------------------------------------------*/\n\nimport * as vscode from \"vscode\";\nimport { oneDataSystemClientFactory } from \"../common/1dsClientFactory\";\nimport { appInsightsClientFactory } from \"../common/appInsightsClientFactory\";\nimport { BaseTelemetryReporter, ReplacementOption } from \"../common/baseTelemetryReporter\";\nimport { BaseTelemetrySender } from \"../common/baseTelemetrySender\";\nimport { TelemetryUtil } from \"../common/util\";\n\nfunction getBrowserRelease(navigator: Navigator): string {\n\tif (navigator.userAgentData) {\n\t\tconst browser = navigator.userAgentData.brands[navigator.userAgentData.brands.length - 1];\n\t\treturn `${navigator.userAgentData.platform} - ${browser?.brand} v${browser?.version}}`;\n\t} else {\n\t\t// clean the user agent using the logic from here:\n\t\t// https://github.com/microsoft/vscode/blob/main/src/vs/workbench/services/telemetry/browser/workbenchCommonProperties.ts#L14C1-L21C2\n\t\treturn navigator.userAgent.replace(/(\\d+\\.\\d+)(\\.\\d+)+/g, \"$1\");\n\t}\n}\n\nexport default class TelemetryReporter extends BaseTelemetryReporter {\n\tconstructor(connectionString: string, replacementOptions?: ReplacementOption[]) {\n\t\tlet clientFactory = (connectionString: string) => appInsightsClientFactory(connectionString, vscode.env.machineId, vscode.env.sessionId, undefined, replacementOptions);\n\t\t// If key is usable by 1DS use the 1DS SDk\n\t\tif (TelemetryUtil.shouldUseOneDataSystemSDK(connectionString)) {\n\t\t\tclientFactory = (key: string) => oneDataSystemClientFactory(key, vscode);\n\t\t}\n\n\t\tconst osShim = {\n\t\t\trelease: getBrowserRelease(navigator),\n\t\t\tplatform: \"web\",\n\t\t\tarchitecture: \"web\",\n\t\t};\n\n\t\tconst sender = new BaseTelemetrySender(connectionString, clientFactory);\n\t\t// AIF is no longer supported\n\t\tif (connectionString && (connectionString.indexOf(\"AIF\") === 0)) {\n\t\t\tthrow new Error(\"AIF keys are no longer supported. Please switch to 1DS keys for 1st party extensions\");\n\t\t}\n\t\tsuper(sender, vscode, { additionalCommonProperties: TelemetryUtil.getAdditionalCommonProperties(osShim) });\n\t}\n}\n"]}