{"version":3,"file":"appInsightsClientFactory.js","sourceRoot":"","sources":["../../../src/common/appInsightsClientFactory.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;AAGhG,OAAO,EAAE,uBAAuB,EAAE,MAAM,uCAAuC,CAAC;AAKhF,OAAO,EAAE,aAAa,EAAE,MAAM,QAAQ,CAAC;AAEvC,MAAM,CAAC,MAAM,wBAAwB,GAAG,KAAK,EAAE,gBAAwB,EAAE,SAAiB,EAAE,SAAiB,EAAE,WAA0B,EAAE,kBAAwC,EAAgC,EAAE;IACpN,IAAI,iBAAkD,CAAC;IACvD,IAAI,CAAC;QACJ,MAAM,UAAU,GAAG,MAAM,MAAM,CAAA,0BAA0B,CAAC,0CAA0C,CAAC,CAAC;QACtG,MAAM,eAAe,GAAsC,EAAE,CAAC;QAC9D,IAAI,WAAW,EAAE,CAAC;YACjB,uFAAuF;YACvF,MAAM,aAAa,GAA0B;gBAC5C,oBAAoB,EAAE,IAAI;gBAC1B,eAAe,EAAE,WAAW;aAC5B,CAAC;YACF,eAAe,CAAC,uBAAuB,CAAC,GAAG,aAAa,CAAC;QAC1D,CAAC;QAED,iBAAiB,GAAG,IAAI,UAAU,CAAC,mBAAmB,CAAC;YACtD,gBAAgB,EAAE,gBAAgB;YAClC,mBAAmB,EAAE,IAAI;YACzB,wBAAwB,EAAE,IAAI;YAC9B,oBAAoB,EAAE,IAAI;YAC1B,yBAAyB,EAAE,IAAI;YAC/B,mBAAmB,EAAE,IAAI;YACzB,sBAAsB,EAAE,KAAK;YAC7B,qBAAqB,EAAE,KAAK;YAC5B,mCAAmC,EAAE,IAAI;YACzC,eAAe;SACf,CAAC,CAAC;IAEJ,CAAC;IAAC,OAAO,CAAC,EAAE,CAAC;QACZ,OAAO,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;IAC1B,CAAC;IACD,uDAAuD;IACvD,MAAM,eAAe,GAAwB;QAC5C,QAAQ,EAAE,CAAC,SAAiB,EAAE,IAAiB,EAAE,EAAE;YAClD,MAAM,UAAU,GAAG,EAAE,GAAG,IAAI,EAAE,UAAU,EAAE,GAAG,IAAI,EAAE,YAAY,EAAE,CAAC;YAClE,IAAI,kBAAkB,EAAE,MAAM,EAAE,CAAC;gBAChC,aAAa,CAAC,iBAAiB,CAAC,UAAU,EAAE,kBAAkB,CAAC,CAAC;YACjE,CAAC;YACD,iBAAiB,EAAE,KAAK,CAAC;gBACxB,IAAI,EAAE,SAAS;gBACf,IAAI,EAAE,UAAU;gBAChB,QAAQ,EAAE,WAAW;gBACrB,GAAG,EAAE,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE,SAAS,EAAE,MAAM,EAAE,SAAS,EAAE,EAAE,GAAG,EAAE,EAAE,KAAK,EAAE,SAAS,EAAE,EAAE;gBAC9E,QAAQ,EAAE,EAAE,IAAI,EAAE,SAAS,EAAE,UAAU,EAAE,IAAI,EAAE,UAAU,EAAE,YAAY,EAAE,IAAI,EAAE,YAAY,EAAE;aAC7F,CAAC,CAAC;QACJ,CAAC;QACD,KAAK,EAAE,KAAK,IAAI,EAAE;YACjB,iBAAiB,EAAE,KAAK,CAAC,KAAK,CAAC,CAAC;QACjC,CAAC;QACD,OAAO,EAAE,KAAK,IAAI,EAAE;YACnB,MAAM,aAAa,GAAG,IAAI,OAAO,CAAO,CAAC,OAAO,EAAE,EAAE;gBACnD,iBAAiB,EAAE,MAAM,CAAC,IAAI,EAAE,GAAG,EAAE;oBACpC,OAAO,EAAE,CAAC;oBACV,iBAAiB,GAAG,SAAS,CAAC;gBAC/B,CAAC,EAAE,IAAI,CAAC,CAAC;YACV,CAAC,CACA,CAAC;YACF,OAAO,aAAa,CAAC;QACtB,CAAC;KACD,CAAC;IACF,OAAO,eAAe,CAAC;AACxB,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { IChannelConfiguration } from \"@microsoft/1ds-post-js\";\nimport { BreezeChannelIdentifier } from \"@microsoft/applicationinsights-common\";\nimport type { IConfiguration, IXHROverride } from \"@microsoft/applicationinsights-core-js\";\nimport type { ApplicationInsights } from \"@microsoft/applicationinsights-web-basic\";\nimport { ReplacementOption, SenderData } from \"./baseTelemetryReporter\";\nimport { BaseTelemetryClient } from \"./baseTelemetrySender\";\nimport { TelemetryUtil } from \"./util\";\n\nexport const appInsightsClientFactory = async (connectionString: string, machineId: string, sessionId: string, xhrOverride?: IXHROverride, replacementOptions?: ReplacementOption[]): Promise<BaseTelemetryClient> => {\n\tlet appInsightsClient: ApplicationInsights | undefined;\n\ttry {\n\t\tconst basicAISDK = await import/* webpackMode: \"eager\" */(\"@microsoft/applicationinsights-web-basic\");\n\t\tconst extensionConfig: IConfiguration[\"extensionConfig\"] = {};\n\t\tif (xhrOverride) {\n\t\t\t// Configure the channel to use a XHR Request override since it's not available in node\n\t\t\tconst channelConfig: IChannelConfiguration = {\n\t\t\t\talwaysUseXhrOverride: true,\n\t\t\t\thttpXHROverride: xhrOverride\n\t\t\t};\n\t\t\textensionConfig[BreezeChannelIdentifier] = channelConfig;\n\t\t}\n\n\t\tappInsightsClient = new basicAISDK.ApplicationInsights({\n\t\t\tconnectionString: connectionString,\n\t\t\tdisableAjaxTracking: true,\n\t\t\tdisableExceptionTracking: true,\n\t\t\tdisableFetchTracking: true,\n\t\t\tdisableCorrelationHeaders: true,\n\t\t\tdisableCookiesUsage: true,\n\t\t\tautoTrackPageVisitTime: false,\n\t\t\temitLineDelimitedJson: false,\n\t\t\tdisableInstrumentationKeyValidation: true,\n\t\t\textensionConfig,\n\t\t});\n\n\t} catch (e) {\n\t\treturn Promise.reject(e);\n\t}\n\t// Sets the appinsights client into a standardized form\n\tconst telemetryClient: BaseTelemetryClient = {\n\t\tlogEvent: (eventName: string, data?: SenderData) => {\n\t\t\tconst properties = { ...data?.properties, ...data?.measurements };\n\t\t\tif (replacementOptions?.length) {\n\t\t\t\tTelemetryUtil.applyReplacements(properties, replacementOptions);\n\t\t\t}\n\t\t\tappInsightsClient?.track({\n\t\t\t\tname: eventName,\n\t\t\t\tdata: properties,\n\t\t\t\tbaseType: \"EventData\",\n\t\t\t\text: { user: { id: machineId, authId: machineId }, app: { sesId: sessionId } },\n\t\t\t\tbaseData: { name: eventName, properties: data?.properties, measurements: data?.measurements }\n\t\t\t});\n\t\t},\n\t\tflush: async () => {\n\t\t\tappInsightsClient?.flush(false);\n\t\t},\n\t\tdispose: async () => {\n\t\t\tconst unloadPromise = new Promise<void>((resolve) => {\n\t\t\t\tappInsightsClient?.unload(true, () => {\n\t\t\t\t\tresolve();\n\t\t\t\t\tappInsightsClient = undefined;\n\t\t\t\t}, 1000);\n\t\t\t}\n\t\t\t);\n\t\t\treturn unloadPromise;\n\t\t}\n\t};\n\treturn telemetryClient;\n};"]}