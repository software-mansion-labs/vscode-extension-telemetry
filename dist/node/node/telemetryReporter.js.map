{"version":3,"file":"telemetryReporter.js","sourceRoot":"","sources":["../../../src/node/telemetryReporter.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------\n * Copyright (C) Microsoft Corporation. All rights reserved.\n *--------------------------------------------------------*/\n\nimport type { IPayloadData, IXHROverride } from \"@microsoft/1ds-post-js\";\nimport * as https from \"https\";\nimport * as os from \"os\";\nimport * as vscode from \"vscode\";\nimport { oneDataSystemClientFactory } from \"../common/1dsClientFactory\";\nimport { appInsightsClientFactory } from \"../common/appInsightsClientFactory\";\nimport { BaseTelemetryReporter, ReplacementOption } from \"../common/baseTelemetryReporter\";\nimport { BaseTelemetrySender } from \"../common/baseTelemetrySender\";\nimport { TelemetryUtil } from \"../common/util\";\n\n/**\n * Create a replacement for the XHTMLRequest object utilizing nodes HTTP module.\n * @returns A XHR override object used to override the XHTMLRequest object in the 1DS SDK\n */\nfunction getXHROverride() {\n\t// Override the way events get sent since node doesn't have XHTMLRequest\n\tconst customHttpXHROverride: IXHROverride = {\n\t\tsendPOST: (payload: IPayloadData, oncomplete) => {\n\t\t\tconst options = {\n\t\t\t\tmethod: \"POST\",\n\t\t\t\theaders: {\n\t\t\t\t\t...payload.headers,\n\t\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t\t\t\"Content-Length\": Buffer.byteLength(payload.data)\n\t\t\t\t}\n\t\t\t};\n\t\t\ttry {\n\t\t\t\tconst req = https.request(payload.urlString, options, res => {\n\t\t\t\t\tres.on(\"data\", function (responseData) {\n\t\t\t\t\t\toncomplete(res.statusCode ?? 200, res.headers as Record<string, any>, responseData.toString());\n\t\t\t\t\t});\n\t\t\t\t\t// On response with error send status of 0 and a blank response to oncomplete so we can retry events\n\t\t\t\t\tres.on(\"error\", function () {\n\t\t\t\t\t\toncomplete(0, {});\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t\treq.write(payload.data, (err) => {\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\toncomplete(0, {});\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\treq.end();\n\t\t\t} catch {\n\t\t\t\t// If it errors out, send status of 0 and a blank response to oncomplete so we can retry events\n\t\t\t\toncomplete(0, {});\n\t\t\t}\n\t\t}\n\t};\n\treturn customHttpXHROverride;\n}\n\nexport default class TelemetryReporter extends BaseTelemetryReporter {\n\tconstructor(connectionString: string, replacementOptions?: ReplacementOption[]) {\n\t\tlet clientFactory = (connectionString: string) => appInsightsClientFactory(connectionString, vscode.env.machineId, vscode.env.sessionId, getXHROverride(), replacementOptions);\n\t\t// If connection string is usable by 1DS use the 1DS SDk\n\t\tif (TelemetryUtil.shouldUseOneDataSystemSDK(connectionString)) {\n\t\t\tclientFactory = (key: string) => oneDataSystemClientFactory(key, vscode, getXHROverride());\n\t\t}\n\n\t\tconst osShim = {\n\t\t\trelease: os.release(),\n\t\t\tplatform: os.platform(),\n\t\t\tarchitecture: os.arch(),\n\t\t};\n\n\t\tconst sender = new BaseTelemetrySender(connectionString, clientFactory,);\n\t\tif (connectionString && connectionString.indexOf(\"AIF-\") === 0) {\n\t\t\tthrow new Error(\"AIF keys are no longer supported. Please switch to 1DS keys for 1st party extensions\");\n\t\t}\n\t\tsuper(sender, vscode, { additionalCommonProperties: TelemetryUtil.getAdditionalCommonProperties(osShim) });\n\t}\n}\n"]}