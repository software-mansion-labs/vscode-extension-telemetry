{"version":3,"file":"1dsClientFactory.js","sourceRoot":"","sources":["../../../src/common/1dsClientFactory.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { AppInsightsCore, IExtendedConfiguration } from \"@microsoft/1ds-core-js\";\nimport type { IChannelConfiguration, IXHROverride, PostChannel } from \"@microsoft/1ds-post-js\";\nimport type * as vscode from \"vscode\";\nimport type { BaseTelemetryClient } from \"./baseTelemetrySender\";\nimport { SenderData } from \"./baseTelemetryReporter\";\n\n/**\n * Configures 1DS properly and returns the core client object\n * @param key The ingestion key\n * @param xhrOverride An optional override to use for requests instead of the XHTMLRequest object. Useful for node environments\n * @returns The AI core object\n */\nconst getAICore = async (key: string, vscodeAPI: typeof vscode, xhrOverride?: IXHROverride): Promise<AppInsightsCore> => {\n\tconst oneDs = await import(/* webpackMode: \"eager\" */ \"@microsoft/1ds-core-js\");\n\tconst postPlugin = await import(/* webpackMode: \"eager\" */ \"@microsoft/1ds-post-js\");\n\tconst appInsightsCore = new oneDs.AppInsightsCore();\n\tconst collectorChannelPlugin: PostChannel = new postPlugin.PostChannel();\n\n\t// Configure the app insights core to send to collector++ and disable logging of debug info\n\tconst coreConfig: IExtendedConfiguration = {\n\t\tinstrumentationKey: key,\n\t\tendpointUrl: \"https://mobile.events.data.microsoft.com/OneCollector/1.0\",\n\t\tloggingLevelTelemetry: 0,\n\t\tloggingLevelConsole: 0,\n\t\tdisableCookiesUsage: true,\n\t\tdisableDbgExt: true,\n\t\tdisableInstrumentationKeyValidation: true,\n\t\tchannels: [[\n\t\t\tcollectorChannelPlugin\n\t\t]]\n\t};\n\n\tif (xhrOverride) {\n\t\tcoreConfig.extensionConfig = {};\n\t\t// Configure the channel to use a XHR Request override since it's not available in node\n\t\tconst channelConfig: IChannelConfiguration = {\n\t\t\talwaysUseXhrOverride: true,\n\t\t\thttpXHROverride: xhrOverride\n\t\t};\n\t\tcoreConfig.extensionConfig[collectorChannelPlugin.identifier] = channelConfig;\n\t}\n\n\tconst config = vscodeAPI.workspace.getConfiguration(\"telemetry\");\n\tconst internalTesting = config.get<boolean>(\"internalTesting\");\n\n\tappInsightsCore.initialize(coreConfig, []);\n\n\tappInsightsCore.addTelemetryInitializer((envelope: any) => {\n\t\tenvelope[\"ext\"] = envelope[\"ext\"] ?? {};\n\t\tenvelope[\"ext\"][\"web\"] = envelope[\"ext\"][\"web\"] ?? {};\n\t\tenvelope[\"ext\"][\"web\"][\"consentDetails\"] = \"{\\\"GPC_DataSharingOptIn\\\":false}\";\n\n\t\t// Only add the remaining flags when `telemetry.internalTesting` is enabled\n\t\tif (!internalTesting) {\n\t\t\treturn;\n\t\t}\n\n\t\tenvelope[\"ext\"][\"utc\"] = envelope[\"ext\"][\"utc\"] ?? {};\n\t\t// Sets it to be internal only based on Windows UTC flagging\n\t\tenvelope[\"ext\"][\"utc\"][\"flags\"] = 0x0000811ECD;\n\t});\n\n\treturn appInsightsCore;\n};\n\n/**\n * Configures and creates a telemetry client using the 1DS sdk\n * @param key The ingestion key\n * @param xhrOverride An optional override to use for requests instead of the XHTMLRequest object. Useful for node environments\n */\nexport const oneDataSystemClientFactory = async (key: string, vscodeAPI: typeof vscode, xhrOverride?: IXHROverride): Promise<BaseTelemetryClient> => {\n\tlet appInsightsCore: AppInsightsCore | undefined = await getAICore(key, vscodeAPI, xhrOverride);\n\tconst flushOneDS = async () => {\n\t\ttry {\n\t\t\tconst flushPromise = new Promise<void>((resolve, reject) => {\n\t\t\t\tif (!appInsightsCore) {\n\t\t\t\t\tresolve();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tappInsightsCore.flush(true, (completedFlush) => {\n\t\t\t\t\tif (!completedFlush) {\n\t\t\t\t\t\treject(\"Failed to flush app 1DS!\");\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t\treturn flushPromise;\n\t\t} catch (e: any) {\n\t\t\tthrow new Error(\"Failed to flush 1DS!\\n\" + e.message);\n\t\t}\n\t};\n\t// Shape the app insights core from 1DS into a standard format\n\tconst telemetryClient: BaseTelemetryClient = {\n\t\tlogEvent: (eventName: string, data?: SenderData) => {\n\t\t\ttry {\n\t\t\t\tappInsightsCore?.track({\n\t\t\t\t\tname: eventName,\n\t\t\t\t\tbaseData: { name: eventName, properties: data?.properties, measurements: data?.measurements }\n\t\t\t\t});\n\t\t\t} catch (e: any) {\n\t\t\t\tthrow new Error(\"Failed to log event to app insights!\\n\" + e.message);\n\t\t\t}\n\t\t},\n\t\tflush: flushOneDS,\n\t\tdispose: async () => {\n\t\t\tconst disposePromise = new Promise<void>((resolve) => {\n\t\t\t\tif (!appInsightsCore) {\n\t\t\t\t\tresolve();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tappInsightsCore.unload(false, () => {\n\t\t\t\t\tresolve();\n\t\t\t\t\tappInsightsCore = undefined;\n\t\t\t\t\treturn;\n\t\t\t\t}, 1000);\n\t\t\t});\n\t\t\treturn disposePromise;\n\t\t}\n\t};\n\treturn telemetryClient;\n};"]}